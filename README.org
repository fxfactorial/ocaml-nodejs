#+AUTHOR:   Edgar Aroutiounian
#+EMAIL:    edgar.factorial@gmail.com
#+LANGUAGE: en
#+STARTUP: indent
#+OPTIONS:  toc:nil num:0 ^:{}

These are [[https://github.com/ocsigen/js_of_ocaml][js_of_ocaml]] bindings to [[https://github.com/nodejs/node][nodejs]]

Get all the power of the amazing ~node~ ecosystem with the sanity and
type safety of ~OCaml~.

#+BEGIN_SRC shell
$ opam install nodejs
#+END_SRC

Working Chat Server
[[./node_server_working.gif]]

Here's the example's source code: which is located along side its
dependencies and make file in the ~examples~ directory.

#+BEGIN_SRC ocaml -n
(* Basically a translation of
   http://arminboss.de/2013/tutorial-how-to-create-a-basic-chat-with-node-js/ *)
open Nodejs

let () =
  let module H = (val require Http) in
  let module Fs = (val require Fs) in
  let io = Socket_io.require () in
  let server =
    H.create_server begin fun incoming response ->

      Fs.read_file ~path:"./client.html" begin fun err data ->
        response#write_head ~status_code:200 [("Content-type", "text/html")];
        response#end_ ~data:(H.String data) ()

      end
    end
  in
  let app = server#listen ~port:8080 begin fun () ->
      Printf.sprintf
        "Started Server and Running node: %s" (new Nodejs.process#version)
      |> print_endline
    end
  in

  let io = io#listen app in
  io#sockets#on_connection begin fun socket ->

    socket#on "message_to_server" begin fun data ->

      io#sockets#emit
        ~event_name:"message_to_client"
        !!(object%js val message = data <!> "message" end)

    end
  end
#+END_SRC

The ~<!>~ infix operator is just a way to get a field of a JavaScript
Object and the ~!!~ prefix operator is a way lift the js_of_ocaml
object literal as a JavaScript object. Notice the high level nature of
the code utilizing OCaml's features like named parameters.

* Steps to get the example working
I assume that you have ~opam~, ~js_of_ocaml~ and of course ~node~
installed. Until I get this all on ~opam~ you'll need to do the
following steps.

1) Get the ~nodejs~ package installed on your machine.
#+BEGIN_SRC shell
$ opam install nodejs
#+END_SRC
2) Get the ~socket_io~ package installed on your machine.
#+BEGIN_SRC shell
$ git clone https://github.com/fxfactorial/ocaml-npm-socket-io
$ cd ocaml-npm-socket-io
$ opam pin add socket_io . -y
#+END_SRC
3) Compile ~chat_server.ml~ into a working ~node~ program. Note that
   this will install a local node module, the ~socket.io~ module.
#+BEGIN_SRC shell
$ cd examples
$ make
#+END_SRC

and open up localhost:8080, you'll have a working ~node~ server.

(Note that you'll only need to call ~make~ once, afterwards you can
directly just invoke node with ~node chat_server.js~.)
* Issues
1) ~node~ has a pretty big API so its going to take me a little bit of
   time to cover the API and the bindings that I'm also writing for
   ~express~ and ~socket.io~
2) ~JavaScript~
