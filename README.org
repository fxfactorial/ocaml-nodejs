#+AUTHOR:   Edgar Aroutiounian
#+EMAIL:    edgar.factorial@gmail.com
#+LANGUAGE: en
#+STARTUP: indent
#+OPTIONS:  toc:nil num:0 ^:{}

These are [[https://github.com/ocsigen/js_of_ocaml][js_of_ocaml]] bindings to [[https://github.com/nodejs/node][nodejs]]

Get all the power of the amazing ~node~ ecosystem with the sanity and
type safety of ~OCaml~. See examples and a working chat server at the
end.

#+BEGIN_SRC shell
$ opam install nodejs
#+END_SRC

* Examples
*Create a file stream, gzip it, write it*
#+BEGIN_SRC ocaml -n
let _ =
  Fs.create_read_stream "code.ml" >|>
  Zlib.create_gzip () >|>
  Fs.create_write_stream "NEWCODE_TEST.ml"
#+END_SRC

*Do an HTTP get request*
#+BEGIN_SRC ocaml
let () =
  try
    ignore begin

      Nodejs.Https.get api_source begin fun incoming ->
        let collect = ref [] in

        incoming#on_data begin fun b ->
          match b with
          | Nodejs.String s -> collect := s :: !collect
          | Nodejs.Buffer b -> collect := b#to_string () :: !collect

        end;

        incoming#on_end (fun () ->
            print_endline (String.concat "" (List.rev !collect)));

      end
    end
  with Js.Error e -> print_endline (e##.message |> Js.to_string)
#+END_SRC

*Create a site and render directly from jade templates*
#+BEGIN_SRC ocaml
open Nodejs

let () =
  let exp = new Express.express in
  let app = new Express.app ~existing:None in

  app#set_app_value (`View_engine "jade");
  app#use (exp#static ".");
  app#get ~path:"/" (fun _ res -> res#render "index.jade");

  app#listen ~port:8080
#+END_SRC

*Create a raw server from the Net module*
#+BEGIN_SRC ocaml
let () =
  let server = Net.create_server ~conn_listener:begin fun sock ->
      sock#on_end (fun () -> print_endline "client disconnected");
      sock#write "Hello\r\n";
      sock >|> sock |> ignore
    end ()
  in
  server#listen ~port:8124 begin fun () ->
    let info = server#address in
    print_endline info.Net.address;
    print_endline (info.Net.ip_family |> string_of_ip);
    print_endline (info.Net.port |> string_of_int);
    print_endline "started server"
  end
#+END_SRC

*Typed Decoding of Buffers*
#+BEGIN_SRC ocaml
let () =
  let string_decoder = new String_decoder.decoder Utf_8 in
  let cent = new Buffer.buffer (`Array [|0xE2; 0x82; 0xAC|]) in
  (string_decoder#write cent) |> print_endline
#+END_SRC

*Multicast DNS, use this to build up a P2P chat application*
#+BEGIN_SRC ocaml -n
(* This is the server *)
open Nodejs

let broadcast_message = "Hello!, anyone listening!?"

let () =
  let server = Udp_datagram.(create_socket Udp4) in
  server#bind ~f:begin fun () ->
    server#set_broadcast true;
    server#set_multicast_max_hops 128;
    set_interval ~f:begin fun () ->
      server#send
        ~offset:0
        ~length:(String.length broadcast_message)
        ~port:5007
        ~dest_address:"224.1.1.1"
        (String broadcast_message)
    end 540
  end
    ()
#+END_SRC

and the client...
#+BEGIN_SRC ocaml -n
open Nodejs

let () =
  let client = Udp_datagram.(create_socket Udp4) in
  client#on_listening begin fun () ->
    client#set_broadcast true;
    client#set_multicast_max_hops 128;
    client#add_membership "224.1.1.1"
  end;
  client#on_message begin fun message remote ->
    print_endline (message#to_string ())
  end;
  client#bind ~port:5007 ()
#+END_SRC

* Working Chat Server

Working Chat Server
[[./node_server_working.gif]]

Here's the example's source code: which is located along side its
dependencies and make file in the ~examples~ directory.

*NOTE* You will still need to have npm modules installed, for instance
this example uses ~socket.io~, ~colors.js~ which means you'll need to
have npm installed socket.io and colors at some point. (Although the
~Makefile~ in examples will do this npm install for you)

#+BEGIN_SRC ocaml -n
(* Basically a translation of
   http://arminboss.de/2013/tutorial-how-to-create-a-basic-chat-with-node-js/ *)
open Nodejs

let () =
  let io = Socket_io.require () in
  let server =
    Http.create_server begin fun incoming response ->

      Fs.read_file ~path:"./client.html" begin fun err data ->
        response#write_head ~status_code:200 [("Content-type", "text/html")];
        response#end_ ~data:(String data) ()

      end
    end
  in
  let app = server#listen ~port:8080 begin fun () ->

      let s =
        Printf.sprintf "Started Server and Running node: %s" (new process#version)
      in

      Colors_js.colorize ~msg:s ~styles:[Colors_js.Cyan_bg; Colors_js.Inverse] []
      |> print_endline

    end
  in

  let io = io#listen app in
  io#sockets#on_connection begin fun socket ->

    socket#on "message_to_server" begin fun data ->

      io#sockets#emit
        ~event_name:"message_to_client"
        !!(object%js val message = data <!> "message" end)

    end
  end
#+END_SRC

The ~<!>~ infix operator is just a way to get a field of a JavaScript
Object and the ~!!~ prefix operator is a way lift the js_of_ocaml
object literal as a JavaScript object. Notice the high level nature of
the code utilizing OCaml's features like named parameters.

The code assumes that ~client.html~ is in the same directory, it looks
like this:

#+BEGIN_SRC html -n
<!DOCTYPE html>
<html>
<head>
<script src="https://cdn.socket.io/socket.io-1.3.7.js"></script>
<script type="text/javascript">
var socketio = io.connect("http://localhost:8080");
socketio.on("message_to_client", function(data) {
document.getElementById("chatlog").innerHTML = ("<hr/>" + data['message'] +
document.getElementById("chatlog").innerHTML);
});

function sendMessage() {
  var msg = document.getElementById("message_input").value;
  socketio.emit("message_to_server", { message : msg});
}
</script>
</head>
<body>
	<input type="text" id="message_input"/>
	<button onclick="sendMessage()">send</button>
	<div id="chatlog"></div>
</body>
</html>
#+END_SRC

* Steps to get the example working
I assume that you have ~opam~ and of course ~node~
installed.

1) Get the ~nodejs~ package installed on your machine.

   #+BEGIN_SRC shell
   $ opam install nodejs colors_js socket_io
   #+END_SRC

2) Compile ~chat_server.ml~ into a working ~node~ program.

   #+BEGIN_SRC shell
   $ cd examples
   $ make
   #+END_SRC

   and open up localhost:8080, you'll have a working ~node~ server.

   (Note that you'll only need to call ~make~ once, afterwards you can
   directly just invoke node with ~node chat_server.js~.)

* Issues
1) ~node~ has a pretty big API so its going to take me a little bit of
   time to cover the API and the bindings that I'm also writing for
   ~express~ and ~socket.io~
2) ~JavaScript~
