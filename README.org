#+AUTHOR:   Edgar Aroutiounian
#+EMAIL:    edgar.factorial@gmail.com
#+LANGUAGE: en
#+STARTUP: indent
#+OPTIONS:  toc:nil num:0 ^:{}

These are [[https://github.com/ocsigen/js_of_ocaml][js_of_ocaml]] bindings to [[https://github.com/nodejs/node][nodejs]]

Get all the power of the amazing ~node~ ecosystem with the sanity and
type safety of ~OCaml~.

#+BEGIN_SRC shell
$ opam install nodejs
#+END_SRC

Working Chat Server
[[./node_server_working.gif]]

Here's the example's source code: which is located along side its
dependencies and make file in the ~examples~ directory.

*NOTE* You will still need to have npm modules installed, for instance
this example uses ~socket.io~, ~colors.js~ which means you'll need to
have npm installed socket.io and colors at some point. (Although the
~Makefile~ in examples will do this npm install for you)

#+BEGIN_SRC ocaml -n
(* Basically a translation of
   http://arminboss.de/2013/tutorial-how-to-create-a-basic-chat-with-node-js/ *)
open Nodejs

let () =
  let io = Socket_io.require () in
  let server =
    Http.create_server begin fun incoming response ->

      Fs.read_file ~path:"./client.html" begin fun err data ->
        response#write_head ~status_code:200 [("Content-type", "text/html")];
        response#end_ ~data:(String data) ()

      end
    end
  in
  let app = server#listen ~port:8080 begin fun () ->

      let s =
        Printf.sprintf "Started Server and Running node: %s" (new process#version)
      in

      Colors_js.colorize ~msg:s ~styles:[Colors_js.Cyan_bg; Colors_js.Inverse] []
      |> print_endline

    end
  in

  let io = io#listen app in
  io#sockets#on_connection begin fun socket ->

    socket#on "message_to_server" begin fun data ->

      io#sockets#emit
        ~event_name:"message_to_client"
        !!(object%js val message = data <!> "message" end)

    end
  end
#+END_SRC

The ~<!>~ infix operator is just a way to get a field of a JavaScript
Object and the ~!!~ prefix operator is a way lift the js_of_ocaml
object literal as a JavaScript object. Notice the high level nature of
the code utilizing OCaml's features like named parameters.

The code assumes that ~client.html~ is in the same directory, it looks
like this:

#+BEGIN_SRC html -n
<!DOCTYPE html>
<html>
<head>
<script src="https://cdn.socket.io/socket.io-1.3.7.js"></script>
<script type="text/javascript">
var socketio = io.connect("http://localhost:8080");
socketio.on("message_to_client", function(data) {
document.getElementById("chatlog").innerHTML = ("<hr/>" + data['message'] +
document.getElementById("chatlog").innerHTML);
});

function sendMessage() {
  var msg = document.getElementById("message_input").value;
  socketio.emit("message_to_server", { message : msg});
}
</script>
</head>
<body>
	<input type="text" id="message_input"/>
	<button onclick="sendMessage()">send</button>
	<div id="chatlog"></div>
</body>
</html>
#+END_SRC

* Steps to get the example working
I assume that you have ~opam~ and of course ~node~
installed.

1) Get the ~nodejs~ package installed on your machine.

   #+BEGIN_SRC shell
   $ opam install nodejs colors_js socket_io
   #+END_SRC

2) Compile ~chat_server.ml~ into a working ~node~ program.

   #+BEGIN_SRC shell
   $ cd examples
   $ make
   #+END_SRC

   and open up localhost:8080, you'll have a working ~node~ server.

   (Note that you'll only need to call ~make~ once, afterwards you can
   directly just invoke node with ~node chat_server.js~.)

* Issues
1) ~node~ has a pretty big API so its going to take me a little bit of
   time to cover the API and the bindings that I'm also writing for
   ~express~ and ~socket.io~
2) ~JavaScript~
